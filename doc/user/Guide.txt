======================
A Guide to Using MetPX
======================

:Authors: 
    Peter Silva
    and many more to come...:-)

:Version: $Revision: $
:Copyright: MetPX Copyright (C) 2004-2006  Environment Canada


.. contents::

Fundamentals
------------

This Guide's goal is to describe the principles and features of metpx 
to help users configure metpx for their needs.  It touches on all the facets
of the package, but with a goal of introducing them, rather than an exhaustive
exposition.  Reference material is elsewhere.

The document begins with a discussion of fundamentals which are assumed in the 
rest of the document.   The various aspects of routing and special effects 
(aka filtering) are gradually unveiled.  After the configuration of a 
single switching system has been covered, the document will move on to 
describe some provide an overview of a typical clustering/HA configuration.

There are two components to the package: metpx-sundew, the switching 
package itself, and metpx-columbo, the web-based monitoring GUI. 
this Guide assumes that both components are already installed, 
but the GUI will not be discussed at first, as all settings 
are controlled via text configuration files.  

After presenting the possibilities for clustering configurations, the stage 
is set for metpx-columbo.  Columbo monitors an entire cluster from a 
single screen, and allows operators to perform certain interactions such
as re-sending of data on client request.

`MetPX <http://metpx.sourceforge.net/>`_ is a high speed, high reliability, 
low-latency meteorological message switching application.  Another term in
wide use for this type of application is a Message Handling System (MHS).
Regardless of the term, the purpose is to handle message traffic for the 
`World Meteorological Organization <http://www.wmo.int>`_'s GTS, as described in the 
`Manual on the Global Telecommunications System <http://www.wmo.ch/web/www/ois/Operational_Information/WMO386/ManOnGTS.html>`_, 
(there will be many references to *WMO386* in this guide)  or GTS.  The 
application originated at the Canadian Meteorological Centre (CMC), which 
in WMO386 Part I terminology is both a Regional Specialized Meteorological 
Centre for Volcanic Ash advisories as well as environmental emergencies, 
in addition to being the National Meteorological Centre for Canada. The 
system is also the gateway between the GTS in Canada and the Canadian 
portion of the International Civil Aviation Organization's (ICAO) 
Aviation Fixed Telecommunications Network (AFTN) operated within Canada
by NavCanada.

At the CMC, Metpx runs on a cluster of Debian Linux systems configured for high 
availability.   As such, configuration requires a basic knowledge of linux 
shell commands (such as ls, rm, cp, cat, and grep), and use of text editor, 
(vi is used, but any text editor will do.)  Lastly python 
( http://www.python.org ) regular expression are heavily used in the 
configuration files. 

All px configuration occurs when running as the px user. So one
needs to begin by opening a shell as the px user.  The ways to accomplish
this are many and varied, and beyond the scope of this manual. however,
throughout the manual, commands are assumed to be typed from this acocunt.

Another important consideration is that MetPX is released under the 
General Public License, Version 2.  GPLv2 is, by far, the most commonly 
used open source license, and its main goal is to encourage collaborative
development.  In that spirit, other groups may decide to contribute 
improvements under the same license.  if any one copyright holder elects 
to change their licensing, because of GPLv2, they will lose access to 
others' contributions.  As contributions accrete, it becomes less and 
less attractive to withdraw from the collaborative work.  The risk
of losing access to others' work is minimized, in comparison to less
strict open source licenses, and especially when compared to customizations 
of commercial software.  For organizations considering improving
a tool for their own purposes, this is the safest license possible,
as even the originating organization cannot remove access to the 
existing code base.

.. image:: BigPicture.png

figure 1: The Overall view of Sources, Filters, and Clients.

Above is an overview of the data switching problem which metpx addresses.
Data can come from many sources.  Often, one can obtain the same (or
similar) data from multiple sources.   Data filters are processes
which transform data in some manner, sometimes they are completely
external, such as the RADAR processing cluster, and sometimes they 
are internal, such as the GIF to PNG converter.  Delivering data to 
clients is complicated because different clients need different
data, some clients want data we are not permitted to send to them,
and many clients are limited in the amount of bandwidth which
can be used to send them data.

One cannot control the wide variety of hardware and software in use
by other entities, or even when it comes to COTS systems for various 
functions (WMO monitoring, GOES acquisition, etc...) Metpx strives to 
apply `Postel's Maxim <http://www.postel.org/postel.html>`_:
*be liberal in what you accept, and conservative in what you send.* In this
context, this often means using commodity technologies, such as standard FTP 
servers, where in the past, some industry specific software would 
have been required on the client system.

Today, MetPX can receive:
 * Alpha-Manager Protocol sockets (A Canadian proprietary protocol.)
 * WMO GTS socket data.
 * files dropped in a directory on the server (we accept them via scp, ftp, cp, and rcp today.)
 * Planned: files dropped in a remote directory accessible via a file transfer protocol (ftp, sftp.)

MetPX can Send:
 * Alpha-Manager Protocol sockets (A Canadian proprietary protocol.)
 * AMIS Protocol sockets (mimics a recently deceased 25 year old Canadian digital satellite broadcast.)
 * WMO GTS socket data.
 * via FTP ( Other file transfer protocols are certainly on our list, such as sftp)

MetPX's switching component (sundew) functions, succinctly, as follows:  
 * data is received by pxReceiver processes, 
 * each pxReceiver processes destermins the routing key for the data, and 
 * The receivers then *switch* or *route* the data based on the label, (that is, they queue the data for the appropriate Filters and Senders. Steps:
      * look up the key in pxRouting.conf
      * a table entry gives the list of destinations, as well as a sending priority.
 * pxSenders send the data which is waiting in their queues.  
 * pxFilters read data from their queue like a sender, transform data in some fashion, and then switch the data like a receiver.

Receivers (also called *Sources*) and Senders (also called *Clients*), as 
their names imply, are uni-directional data channels.  A receiver will only 
receive data, and a sender will only send it.   While there are two broad 
categories of data,  bulletin and file,  there is only one internal 
representation of data in metPX: files.  On receipt, every bulletin is 
turned into a file, and stored in a directory hierarchy.  The queue for a 
sender is just another directory tree.

The traditional form of data for the GTS is the bulletin.  What is a bulletin?
In general, bulletins are defined by `WMO386 attachment II
<http://www.wmo.ch/web/www/ois/Operational_Information/WMO386/Volume1/AttachmentII_5.pdf>`_ .  
For our purposes, however, a WMO bulletin is a stream of 
bytes.  The stream always begins with an Abbreviated Header line (as defined in WMO386), or AHL, for the bulletin, expressed in 7-bit ASCII characters.  
MetPX uses the AHL to route bulletin data.  An AHL is of the general form:

  *TTAAii* *CCCC* *DDHHMM*  ... example: SACN31 CWAO 091300

Sample information from an AHL:
 * SA - Surface observation, from
 * CN - Canada, (the AA is not always a country code, depends on TT)
 * 31.. a number indicating the scope of distribution, local, national, regional, wordwide.
 * CWAO bulletin originated at the Canadian Meteorological centre,
 * 091300 - on the ninth day of the month, 13h00 (1:00 pm) in UTC timezone.

The above is a very brief introduction the topic of AHL's. For a proper 
discussion, please consult WMO386.  For Metpx, the fundamental point
is it extracts TTAAii_CCCC to create a routing key.

The second category of data which metpx understands is files. A file is a stream
of bytes, with a name.  Metpx extracts a key from the name of a file and
perform the same switching function used for bulletins.

Just to confuse users, there is also a hybrid reception type: bulletin-file.
A bulletin-file though it receives files like a file receiver, it ignores 
their names. Instead it treats all files as if they were a byte stream 
received on a socket connection. The bulletin-file receiver looks for 
the first AHL in a file, routes the contents accordingly.

A philosophical note:
  While some understanding of formats is necessary in order to properly 
  switch meteorological data, in the interest of simplicity, 
  MetPX seeks to minimize the knowledge of the stream of bytes beyond 
  the label of each datum.  This application is intended to switch data, 
  and not perform any decoding, normalization (beyond what is strictly 
  needed for routing.) or QA on the data.

  A natural consequence of this approach is that bulletin and file can
  often be used interchangeably in metpx.  In most WMO switching systems,
  a file usually contains several bulletins. In metpx, a file usually
  contains a single bulletin.




A First Run
-----------

In this section, a minimal configuration is built and run.
The reader is introduced to the directory tree, how to start
and stop circuits, and check their status.

First construct a small pool of sample bulletins
(copy thes commands and pasting them into a shell will build the files 
on your server.)

| mkdir sample_bulletins
| 
| cat >sample_bulletins/s1 <<EOT
| SACN31 CWAO 300651
| METAR
| BGBW 131550Z 21010KT 8000 -RADZ BKN006 OVC012 03/00 Q1009 RMK 5SC
|      8SC=
| EOT
| cat >sample_bulletins/s2 <<EOT
| SANT31 CWAO 300651
| METAR
| BGBX 131550Z 21010KT 8000 -RADZ BKN006 OVC012 03/00 Q1009 RMK 5SC
|      8SC=
| EOT
| cat >sample_bulletins/s3 <<EOT
| SICN25 CWAO 300651
| AAXX 04154
| 71255 36/// /0202 11078 21089 333 60001=
| EOT
| 
| cat >sample_bulletins/s4 <<EOT
| SICN25 CWAO 300651
| AAXX 04154
| 71255 36/// /0202 11078 21089 333 60001=
| EOT
| 
| cat >sample_bulletins/s5 <<EOT
| SMCN37 CWAO 300651
| AAXX 20184
| 71784 16/// /0000 10036 20031 39903 40107 53021 60001 333 10040
| 20020 70305=
| EOT
| 
| cat >sample_bulletins/s6 <<EOT
| SMCN37 CWAO 300651
| AAXX 20184
| 71783 16/// /0000 10036 20031 39903 40107 53021 60001 333 10040
| 20020 70305=
| EOT

Now build a sample configuration: 

|
| cat >/etc/px/rx/file.conf <<EOT
|   type bulletin-file
|   extension file\:-CCCC:-TT:-PRIORITY:Direct
|
| cat >/etc/px/rx/loop.conf <<EOT
|   type wmo
|   port 5002
|   extension pxatx\:-CCCC:-TT:-PRIORITY:Direct
| EOT
|
| cat >/etc/px/tx/loop.conf <<EOT
|   type wmo
|   destination wmo://localhost:5002
|   accept .*:.*:.*:.*:.*:.*:.*
| EOT
|
| cat >/etc/px/pxRouting.conf <<EOT
|   key_accept .* loop 3
| EOT
|

FIXME: default 'extension' should be set in /etc/px/px.conf as a sitewide
setting. 

As the above series of commands show, configuration files for metpx
reside in the /etc/px directory.  Configuration which applies to multiple
channels is in this directory.  Individual channels are created by
placing an appropriate .conf file in an rx, fx, or tx sub-directory.
The above configuration creates two receivers and one sender.
The pxRouting.conf file specifies a central table consulted by all 
receivers and filters. The routing table above routes any and all data 
received to the loop sender.  Start it up to see what happens.

| px@laptop:~/$ px start

The above will start all the configured recievers and senders.
Let's have a look at the processes:

| px@laptop:~/$ ps ax | grep px
| 15897 pts/2    S      0:00 su - px
| 16848 pts/2    S      0:00 python /usr/sbin/pxReceiver loop start
| 16849 pts/2    S      0:00 python /usr/sbin/pxReceiver file start
| 16856 pts/2    R      0:04 python /usr/sbin/pxSender loop start
| 16863 pts/2    R+     0:00 grep px
| px@laptop:~/$  

So the Receivers have started.  Let us given them some data to route.

| cp sample_bulletins/* /var/spool/px/rxq/file/3

That will copy a selection of bulletins into the file receiver's input queue.  What happens next?:

 1. The bulletins are ingested and queued for transmission via the loop sender.   
 2. The loop sender sends the bulletins to the loop receiver.
 3. The loop receiver ingests and queues the data for transmission via loop sender.
 4. The loop sender sends the bulletins to the loop receiver.
 5. The loop receiver detects that these are duplicate messages and discards them.

Lets have a look at the log files in the /var/log/px, directory and examine the results.
There should be three log files, and they should indicate normal startup.  Look at rx_file.log first:

| 2006-10-08 00:23:31,060 [INFO] Receiver file has been started
| 2006-10-08 00:23:31,061 [INFO] Initialisation of source file
| 2006-10-08 00:23:31,064 [INFO] Ingestor (source file) can link files to clients: ['loop']
| 2006-10-08 00:23:31,290 [INFO] Initialisation of client loop
| 2006-10-08 00:23:31,506 [INFO] Routing table used: /etc/px/pxRouting.conf
| 2006-10-08 00:24:36,553 [INFO] 6 bulletins will be ingested
| 2006-10-08 00:24:36,556 [INFO] (107 Bytes) Ingested in DB as /apps/px/db/20061008/SM/file/CWAO/SMCN37_CWAO_300651___0001:file\:CWAO:SM:3:Direct:20061008042436
| 2006-10-08 00:24:36,557 [INFO] Queued for: loop

Then the rest of the bulletins are ingested once, and each in turn is queued for transmission on the loop wmo sender.
Now have a look at the log of the sender:

| 2006-10-08 00:23:31,278 [INFO] Sender loop has been started
| 2006-10-08 00:23:31,316 [INFO] Initialisation of client loop
| 2006-10-08 00:23:31,543 [INFO] Trying to connect remote host localhost
| 2006-10-08 00:23:31,547 [INFO] Connexion established with localhost
| 2006-10-08 00:24:36,615 [INFO] 6 new bulletins will be sent
| 2006-10-08 00:24:36,616 [INFO] (130 Bytes) Bulletin SACN31_CWAO_300651___0006:file\:CWAO:SA:3:Direct:20061008042436  delivered
| 2006-10-08 00:24:36,617 [INFO] (130 Bytes) Bulletin SANT31_CWAO_300651___0005:file\:CWAO:SA:3:Direct:20061008042436  delivered
| 2006-10-08 00:24:36,618 [INFO] (103 Bytes) Bulletin SICN25_CWAO_300651___0003:file\:CWAO:SI:3:Direct:20061008042436  delivered
| 2006-10-08 00:24:36,618 [INFO] suppressed duplicate send SICN25_CWAO_300651___0004\:file\:CWAO:SI:3:Direct:20061008042436
| 2006-10-08 00:24:36,619 [INFO] (141 Bytes) Bulletin SMCN37_CWAO_300651___0001:file\:CWAO:SM:3:Direct:20061008042436  delivered
| 2006-10-08 00:24:36,620 [INFO] (141 Bytes) Bulletin SMCN37_CWAO_300651___0002:file\:CWAO:SM:3:Direct:20061008042436  delivered
| 2006-10-08 00:24:36,722 [INFO] 5 new bulletins will be sent
| 2006-10-08 00:24:36,722 [INFO] suppressed duplicate send SACN31_CWAO_300651___00001:localhost:CWAO:SA:3:Direct:20061008042436
| 2006-10-08 00:24:36,723 [INFO] suppressed duplicate send SANT31_CWAO_300651___00002:localhost:CWAO:SA:3:Direct:20061008042436
| 2006-10-08 00:24:36,723 [INFO] suppressed duplicate send SICN25_CWAO_300651___00003:localhost:CWAO:SI:3:Direct:20061008042436
| 2006-10-08 00:24:36,723 [INFO] suppressed duplicate send SMCN37_CWAO_300651___00004:localhost:CWAO:SM:3:Direct:20061008042436
| 2006-10-08 00:24:36,724 [INFO] suppressed duplicate send SMCN37_CWAO_300651___00005:localhost:CWAO:SM:3:Direct:20061008042436

The loop receiver log will show the messages being ingested, and sent, as in 
the file receiver.  So from this you can see a very simple installation 
configuration self-test.  One can try a few more commands to clean up after 
the excercise:

| px@laptop:~/log$ px stop
| px@laptop:~/log$ px status
| * receiver loop is not running
| * receiver file is not running
| * sender loop is not running
| px@laptop:~/log$ ps ax | grep px
| 15897 pts/2    S      0:00 su - px
| 18704 pts/2    S+     0:00 grep px
| px@laptop:~/log$    

To make the test run forever, You can turn off duplicate message detection
in the sender by adding the line *noduplicates false* to the sender's config (/etc/px/tx/loop.conf). 


Basic Routing
-------------

-- source
     -- apply accept to extract key.

   pxRouting.conf
       -- list of keys with clients to route to.
          find key, queue up for those clients.

-- client.
       -- looks in it´s queue
       -- applies imasks, sends as directed.


Advanced Routing
----------------

Hi Anne-Marie!?
use Nws, ukmet & noaaport triple GTS feed routing as example.
receiving same bulletins from multiple sources, suppressing some sources
for some destinations, using



Filters
-------
Hi Michel!
A Demo with bulletin Collection would be really cool here.


Routing Recommendations
-----------------------


Use Revision control on configuration files.
  systems such as RCS, CVS, and Subversion are very helpful for maintaining
  configuration files. One of the primary advantages of text based configuration
  files is being able to compare different configurations easily via diff.
  tracking who made what change, when, can be invaluable when troubleshooting.

Use separate reception directories to clarify sources of data.
  One could configure a single reception directory for all data. Sorting
  through such a directory to determine which files are which data will be
  more cumbersome and error prone than if the reception is separate at least
  for each entity delivering data to a MetPX instance.  This will also reduce
  processing overhead, because fewer masking patterns will be in place for each
  reception directory, and for each file, one will have to go through fewer patterns.

Use key directive (in preference over key_accept) and comments copiously in pxRouting.conf
  MetPX provides the ability to use broad patterns to perform very simple routing.
  In an NMC, or other environment where delivering the wrong data to the wrong 
  client can have important consequences, one does uses such patterns very 
  sparingly.  Instead, very detailed, specific routing tables are common.  
  CMC uses approximately 30,000 bulletin data routing entries and 60,000 
  entries for file data in their routing tables.  A major goal in MetPX's 
  design was to efficiently operate with very large routing tables.
 
  MetPX is not designed as an indiscriminate weather broadcasting tool
  where the main constraint is client need for data, rather than provider
  constraints (such as permissions)  

|   key SACN37_CWAO NWP,Archive 3  # Private stations from provincial Hydro 
|   key SICN25_CWAO NWP,Archive,GTS_main 3 # our stations in Northern Province of Hoser
|   key SANT31_CWAO NWP,Archive,GTS_main,GTS_backup 3
|   key SMCN37_CWAO NWP,Archive,GTS_main,GTS_backup 3

  When sending data, one always must be cognizant of the channel over which the
  data is being sent.  Sending radar data over a phone line, for example, will 
  often result in not being able to get weather warnings through, because the 
  line will be clogged.  Metpx provides precise routing in order for users to
  be able to control exactly what is sent on a communications link at any
  given time.  

  Beyond the practical necessity of controlling bandwidth, there is the need
  to assure data providers of appropriate distribution of their data.  Key
  to obtaining many sorts of data is the promise not to distribute it.  Systems
  which are oriented towards weather broadcasting are thus ill-suited for
  our needs.

  With all this in mind, It is anathema to permit users to easily be able to 
  request re-transmission of large amounts of data or different types of
  data.  Manual oversight, as a management function, is *a good thing*. 


WMO Monitoring 
--------------
Anne-Marie, write up a little configuration...
 * promote the DWD package, provide a link...
 * Give a sample circuit configuration.


Feeding LDM
-----------
how we feed GEM? Is that PDS?  ok hypothetical... how we will feed LDM once
we move it over.

Receiving from LDM
------------------
The NOAAport configuration.


AFTN
----

The AFTN over TCP/IP Gateway in MetPX is an end-node implemention, which expected to talk to to a AFTN 
Message Handling System.  It is not a complete AFTN MHS on its own.  The protocol implemented was 
specified by NavCanada for use with their MHS, which should be quite similar to the interface supported
by AFTN MHS's from vendor XYZ.

AFTN is well, necessarily completely different from WMO protocols.  Instead of unidirectional channels, 
AFTN requires bi-directional channels.   Instead of using WMO headers, there are AFTN envelopes to 
remove, and inside are WMO messages., there are mappings, and WMO bulletins are encapsulated within 
AFTN messages.  

I think Daniel must write this part... 


Product eXchange Array
----------------------
Peter? 


Columbo
-------


Miscellany
----------

OK, there is also mr-clean, which eliminates unwanted empty directories, 
as well as pxChecker which restarts any channels which may have failed.  Those 
processes generally need no attention.  

