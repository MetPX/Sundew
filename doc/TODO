MetPX Copyright (C) 2004-2006  Environment Canada
MetPX comes with ABSOLUTELY NO WARRANTY; For details type see the file
named COPYING in the root of the source directory tree.



  -- Add delay before grabbing files in rxq (done for type ?bulletin-file? but not ?single-file?)
  -- Socket pxSenders:  Add automatic switch to a backup server destination  (in case primary is unreachable)
  -- AM pxReceiver:  Modify the ?arrival? parameter processing (used for MA, RA, CA bulletins ) to ensure it checks the date within the bulletin and not in the header (the one in the header is often added by pxReceiver when absent in header)
  -- Add pxReceiver/pxSender tools on the lvs-op machines to simplify stop and start of processes on backends.
  -- Trace options for pxSender and pxReceiver`s.

   
  -- develop basic self-test suite.

  -- revamp coding standard.
        -- move 'authorship' to start of file, alone. not every routine.
           If a file has more than one author major, list all at top (once)
        -- scope (public vs. private) of a routine is revealed by it's name
           this information is redundant. Date per routine is redundant.
           available from source management system.
        -- at least the documentation in English (required for open sourcing.)

  -- sender
        -- drop products on aging support.

  -- clone PDS messages, to minimize impact on pds-stats & columbo.
        -- put all log messages in English.
        -- concise (there are a lot more of them.)
        -- add bytes to each send.
        -- use os.path.basename() so don't include whole path of bulletin.
           in send messages.

  -- duplicate suppression, Move Daniel´s duplicate suppresion algorithm
     to the head end (on receipt) rather than the tail (AMIS.)

  -- AFTN support -- DL
	-- need a contingency if we move the Tandem.

  -- end to end performance testing.

  -- ability to interpret SIGHUP without hanging up the socket.

  -- more options on receiver? (tune directory sleep timer or...)

  -- move status out from .conf files, into q directories.
     ie.   txq/<client>/.status -> active enabled
     or just put it inside .lock?, no want to persist across restarts.

  -- student project... directory watching technique study.
	-- opendir poll, versus, poll mtime, FAM, fcntl(D_NOTIFY, fcntl(I_NOTIFY)
	-- make a something to tickle the directory to test it.
	-- test resource usage & responsiveness of all methods.
		-- when the directory is almost always empty
		-- when the directory is getting multiple files per second.

  -- student project:
	-- add sftp support into curl.
	-- just work with the open source project and modify it.

  -- student project:
	-- see if there is bandwidth control in curl, and if not
	   see if we can add it.

  -- full ftp sender.   DL!
	-- record byte count on send in log.
	-- supports multiple protocols (http,https, sftp  etc...)
	-- based on curl.
        -- add naming strategies on delivery (ie. permission vs. no-rename, etc...)
        -- add passive/active?

  -- full file fetcher, as another prx method.
  	-- based on Daniel's work for scribe files.
	-- use also for gudfx stuff.
	-- good market for this with implementation, if
           we do it right.

  -- Documentation
	-- Extract all the TIKI stuff .. dump it into docs/specs...
           sub-dir like requirements/Spec/Design.?
	-- keep it for reference.

  -- i18n 
     Logs and error messages controlled by locales, default English, 'C' locale.
 
  -- add ingester routing directive, so that one can use
     masked routing on socket connections. Currently, routing is fixed by type.
     All sockets are directly mapped, and single-file is masked PDS-style. 
     ie. config options ´routing direct|masked´ in receiver.

     perhaps move entire routing scheme to a table driven one, by mapping
     dbnames to keys... ie... rmask directive in receivers...
     rmask RDRVOL   *:*:RADAR:*...
     and then have RDRVOL as an entry in the routing table.

  -- (only later, for PDS) add ingester conversion routines. to do the 
     *2gif, or whatever conversions, and have all versions ingested.

  -- once we get to PDS... all those unwrappers from Rejean... 
     are gone!  Thanks to Antoine...

  -- performance improvement, worklists...
     drop off worklists in the q directories, rather than linking files...
     reduces overhead... ie... receiver builds a list of files to q for each
     client places the list in /apps/px/txq/q<source>_<unique>
 
     Senders then read the names in all the q files, and perform the normal
     priority sort.

     faster than linking each file under heavy load, much less file system 
     interaction.  test!?
