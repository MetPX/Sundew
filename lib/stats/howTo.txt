"""
MetPX Copyright (C) 2004-2006  Environment Canada
MetPX comes with ABSOLUTELY NO WARRANTY; For details type see the file
named COPYING in the root of the source directory tree.
"""

#######################################################################################
##
## Name   : howTo.py 
##  
## Author : Nicholas Lemay  
##
## Date   : August 9th 2006
##
##
## Goal   : Show proper usage of the library to user.
##          Make use of the library easier to understand.
##                    
####################################################################################


How to use the stats library, step by step : 
 
 --------------------------
|Step 1 - Data collection. |
 --------------------------
     
     ------------------
    |Preliminary steps |
     ------------------
     
    Data collection must be done localy. Data collected will be saved in pickle files.
    
    Step 1.1 - Connect on the machine where you want to collect data  
    
    Step 1.2 - Go in the /apps/px/lib/stats/ folder
    
    Step 1.3 - Run the following to see how pickleUpdater.py works : python pickleUpdater.py -h 
    
    Step 1.4 - Run pickleUpdater.py with the wanted parameters to update the needed clients.
   
         
    ---------------------------------------------------------
   | How to have pickleUpdater.py do what you want it to do: |
    ---------------------------------------------------------
        Step 1.4.1
            Update All tx or rx client found on the machine up to now :
                    pickleUpdater.py -f tx
                    pickleUpdater.py -f rx
            
            Note These two commands will be the most used of any commands that can be used with pickle updates.        
        
        Step 1.4.2
            update a certain tx client :
            
            pickleUpdater.py -f tx -c satnet
            pickleUpdater.py -f rx -c satnet
        
        
        Step 1.4.3
            update a certain tx client up to a certain date :
            pickleUpdater.py -f tx -c satnet -d "2006-08-08 12:15:00"
            
            ***Very usefull to start off a new client. At first, you use pickleUpdater with  
            the first hour where the client started as parameter. 
            
            Once this has been done, you update it up to now using : pickleUpdater.py -f tx -c satnet
            and the application will update the data up to now no matter how many hours
            or days there has been since the first hour.      
        
            
        Step 1.4.4
            Update only one type of data for a client (not recommended since it limits the graphics that can be produced 
            
            pickleUpdater.py -f tx -c satnet -t bytecount             
        
           

 -------------------------------------------------------------------------    
| Step 2 - Getting the collected data on your graphic producing machine. |
 -------------------------------------------------------------------------
     
     --------------------------------------
    |Preliminary steps (done in this order)|
     --------------------------------------
    Step 2.1 - Connect to the graphic producing machine.
    
    Step 2.2 - Go in the /apps/px/lib/stats/ folder. 
    
    Step 2.3 - Run the following to see how pickleSynchroniser.py works : python pickleSynchroniser.py -h 
    
    Step 2.4 - Run pickleSynchroniser.py with the parameters wanted to get the desired results:
    
    --------------------------------------------------------------
   | How to have pickleSynchroniser.py do what you want it to do: |
    --------------------------------------------------------------
       Example 1 :
        
            Update data from all machines :
            
            pickleSynchroniser.py 
            
            Note : this will be the most used call to pickleSyncrhoniser.
        
       Example 2
            
            Update data from a specific machine :
            
            pickleSynchroniser.py -m "pds5"
        
            Note : Might be obligatory if all machines have different ssh logins.
        
       Example 3
            
            Update data from a specific client of a machine 
            
            pickleSynchroniser.py -m "pds5" -c "satnet"
            
            Note : this will make updating very long if done client per client and is
            thus not recommended.
        
            
       Example 4
        
            Specify wich ssh login to use when connecting to the machines to update :
            
            pickleSynchroniser.py -m "pds5" -c "satnet" -l "myLogin"
        
            Note : It is recommended that you use a login that has instant access to
                   the machine when using pickleSynchroniser.py or else automatic updates
                   using crontab will be useless since user needs to type password for 
                   every ssh connection... 
            
                   
                   
 ----------------------------- 
|Step 3 - Producing Graphics. |
 -----------------------------  
     
     ------------------
    |Preliminary steps |
     ------------------
    Step 2.1 - Connect to the graphic producing machine.
    
    Step 2.2 - Go in the /apps/px/lib/stats/ folder. 
    
    Step 2.3 - Run the following to see how generateGRaphics.pyy works : python generateGraphics.py -h 
    
    Step 2.4 - Run generateGraphics.py with the parameters wanted to get the desired graphics
    
     --------------------------------------------------------
    | How to have  the graphics you want:                   |
     --------------------------------------------------------
        Example 1
            produce a graphic for satnet, for the past 12 hours for each of the 
            data type supported by tx files coming from data collected on all machines.
            
            generateGraphics.py -c satnet
            
        Example 2
            produce a graphic for satnet and amis, for the past 12 hours for each of the 
            data type supported by tx files coming from data collected on all machines.
            
            generateGraphics.py -c "satnet,amis"

        Example 3
            produce a graphic for satnet, for the past 5 hours for each of the 
            data type supported by tx files coming from data collected on all machines.
            
            generateGraphics.py -c satnet -s 5
            
        Example 4
            produce a graphic for client, for the past 12 hours for each of the 
            data type supported by rx files coming from data collected on all machines.
            
            generateGraphics.py -c satnet -f rx   
            
        Example 5
            produce a graphic for satnet, for the past 12 hours for each of the 
            data type supported by tx files coming from data collected on pds5 machine.
            
            generateGraphics.py -c satnet -m pds5
            
        Example 6
            produce a graphic for satnet, for the past 12 hours for each of the 
            data type supported by tx files coming from data collected on all machines. 
            Use only data relative to product that contain the name WXB 
             
            
            generateGraphics.py -c satnet  -p WXB   
            
            
        Example 7
            produce a graphic for satnet, for the entire day of october 8th 2005 for
            each of the data type supported by tx files coming from data collected on 
            all machines.
            
            generateGraphics.py -c satnet -s 24 -d "2005-10-08 01:00:00"
            
        
        Example 8
            produce the same graphic but only for latency 
            
            generateGraphics.py -c satnet -s 24 -d "2005-10-08 01:00:00" -t latency     
 
        
        Example 9
            produce the same graphic but only for latency and errors
            
            generateGraphics.py -c satnet -s 24 -d "2005-10-08 01:00:00" -t "latency,errors"
                        
                       
        Example 10
            5 hour graphic, requested at 5h15 on august 8th 2006, for rxclient, using 
            data collected only for products containing WXBO in their name, using data
            collected on pds5 and 6 
            
            generateGraphics.py -c rxclient -d "2006-08-08 05:15:00" -f rx -m "pds5,pds6"
            -p WXBO -s 5 -t "bytecount,errors"   

                                
 --------------------   
| Step 4 - Utilities |
 --------------------
       
    4.1 pickled times
    
        To see the content of pickled-times file wich contain the time 
        of the last update of every client, on a specific machine use the folowing :
        
        Step 4.1.1 - Connect on the machine.
        Step 4.1.2 - Go to the /apps/px/lib/stats/ folder. 
        Step 4.1.3 - run pickleSynchroniser.py 
        
        This is very usefull for debugging.
    
        
    4.2 pickleViewer    
        To see the content of pickle files containg the collected data on a
        specific machine use the folowing :
        
        Step 4.2.1 - Connect on the machine.
        Step 4.2.2 - Go to the /apps/px/lib/stats/ folder. 
        Step 4.2.3 - Run pickleViewer.py -h to sse how it works
        Step 4.2.4 - Run pickleSynchroniser.py with the parameters wanted to 
                     get the desired results:
    
         --------------------------------------------------------
        | How to have pickleViewer.py do what you want it to do: |
         --------------------------------------------------------
         Example 1
            View a specific pickle
                pickleViewer.py /apps/px/stats/pickles/amis/20060808/tx/lvs1-dev_00
                
         Example 2
            Dump the content of the pickle in a text file for easier viewing.
            pickleViewer.py /apps/px/stats/pickles/amis/20060808/tx/lvs1-dev_00 /myHomeFolder/outputFile.txt.
        
         This is very usefull for debugging.
         
         
 --------------------------------------
| Step 5 Making it all work together : |
 --------------------------------------
 
    Step 5.1 - Collect data first:
    
        It would be pretty futile to try and synchronise data when none has been produced. 
        Producing graphics with empty data would also be useless. 
        
        We recommend updating the data for every client at every hour. 
        
        Data is plit up in pickle covering an entire hour each. It this makes sense to 
        produce them as early as possible so they can be used where needed.
        
        Collecting data right at the turn of the hour should not be done and will be prone to
        producing errors. Please set your updates a few minutes after the turn of the hour. 
    
    
    Step 5.2 - Synchronise data 
        
        We recommend sychronising data only once its been updated. 
        
        The sooner the better since it will be available to the user who wants 
        to produce graphs. 
        
        However, running an update at a time too close to the data collection might 
        be counter-productive.
        
        If data collection takes longer than expected, data will not be totally 
        collected during the time of the synchronisation. In that case it will not 
        be avaiable to the destination machine untill the next update.
        
        Since we recommend collecting data hourly, it is also recommended to synchronise
        files hourly.
        
         
        
    Step 5.3 - Produce graphics based on synchronised data.
        
        Graphics will be produced up to the top of the current hour. 
        EX 15:00:00 if requested at 15:38:16
        
        If data doesnt exist for a certain hour it will be repalced by empty data 
        for that hour. This will show up as a warning in the log files.
        
        If data was not synchronised at the time of the graphics production and 
        lets say hours 7 was missing. 
        
        If a later data synchronisation occurs and retreives data for hour 7 on the client producing machine, 
        the graphic should be remade by the user as to have the right graphic...





