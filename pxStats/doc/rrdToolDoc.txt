"""
MetPX Copyright (C) 2004-2006  Environment Canada
MetPX comes with ABSOLUTELY NO WARRANTY; For details type see the file 
named COPYING in the root of the source directory tree.
"""
################################################################################
#               _ _____           _       _              
#              | |_   _|         | |     | |             
#  _ __ _ __ __| | | | ___   ___ | |   __| | ___   ___   
# | '__| '__/ _` | | |/ _ \ / _ \| |  / _` |/ _ \ / __|  
# | |  | | | (_| | | | (_) | (_) | | | (_| | (_) | (__  _ 
# |_|  |_|  \__,_| \_/\___/ \___/|_|  \__,_|\___/ \___ (_)
#                                                       
#                                                       
# Author        : Nicholas Lemay
# Last Update   : November 3rd 2006
#
################################################################################


Quick overview( Taken from official web page )
-----------------------------------------------------

* RRDtool stores data; that makes it a back-end tool. The RRDtool command set 
  allows thecreation of graphs; that makes it a front-end tool as well. 
  Other databases just store data and can not create graphs.

* In case of linear databases, new data gets appended at the bottom of the
  database table. Thus its size keeps on increasing, whereas the size of an 
  RRDtool database is determined at creation time. Imagine an RRDtool database 
  as the perimeter of a circle. Data is added along the perimeter. When new 
  data reaches the starting point, it overwrites existing data. This way, the 
  size of an RRDtool database always remains constant. The name ``Round Robin''
  stems from this behavior.
  
  
Creating the database :
------------------------------------------------------  
    rrdtool.create( databaseName, '--start','%s' %( startTime ), '--step',
    '60','DS:latency:GAUGE:60:U:U', 'RRA:AVERAGE:0:1:1440',
    'RRA:MIN:0:1:1440', 'RRA:MAX:0:1:1440', 'RRA:AVERAGE:0:5:2016',
    'RRA:MIN:0:5:2016', 'RRA:MAX:0:5:2016','RRA:AVERAGE:0:1440:3650',
    'RRA:MIN:0:1440:3650', 'RRA:MAX:0:1440:3650' ) 
    
This creates a database named databaseName, wich starts at startTime. 
No data that has a date prior or equal to startTime will be accepted.

Step allows to specify the frequency (in seconds) at wich data will be fed to 
the database.    

DS(data source) specifies the name of the data we want to save in the database. 
GAUGE is the type of calculation that is to be used( choices are GAUGE, COUNTER,
DERIVE, ABSOLUTE)

60 is the maximum amount of time for wich we will accept no data
to be entered. If there is more than 60 secs between updates, values of non 
filled entries will be set to unknown.

:u:u specifies that both minimum and maximum acepted values are unlimited.


RRA's allows us to specify how data is to be consolidated inthe database.
1st set of rra's : keep last 24 hours for daily graphs. Each line contains 
                   1 minute of data. 
                   ( 1440 * 1 entry of 60 seconds) 
2nd set of rra's : keep last 7 days for weekly graphs. Each line contains 
                   5 minutes of data. 
                   ( 2016 * 5 combined entries of 60 seconds each )
3rd set of rra's : keep last 10 years of data. Each line contains 24 hours 
                   of data.
                   ( 3650 * 1440 combined entries of 60 seconds each. )
      
                   
For each rra's, the 0 value means that 0% of unknown data is allowed for each 
entry. In current program settings this value has been set to 0.5 as to allow
some hours to have a few minutes with empty data,especially the very first hour
where the database was created since rrd doesnt allow to update the very first 
minute of that hour. This behaviour causes an RRA witha setting of 0% to 
discard an entire day of data based on a single minute of empty data.
 
                                
Important note on database creation.
--------------------------------------------------------
RRA's behave on relative values, not absolutes. This means that if a database
is created using a starting time of 13:16:56 and you specify an AVERAGE rra
containing one hours worth of data, your first entry will be filled with data 
comprised between 13:16:56 and 14:16:56 NOT between 13:16:56 and 14:00:00. While
this does save the data in 1 hour wide entries, this will  make for most 
applications therefore it is recommended to start up databases at the closest
point of the furthest entry that is to be used.

Examples : hourly entries needs the database to start at the top of the hour.    
           daily entries need to start at the very start of the day. 
           Yearly entries would probably need to start at the beginning of 
           the month.
          ( Handling monthly and yearly data is ackward and would probably 
            require a few workarounds. )
                              
                                      
Feeding the database with data :
------------------------------------------------------
The following command must be executed to update the database names 
databaseName. 

rrdtool.update( rrdFileName, '%s:%s' %( int(pair[0]), int(pair[1]) ) )

First value of the pair is the number of seconds since epoch value for wich 
we want to set a value.

Number of seconds must be an integer.    

Second value is the value to be set.                 
                   
Data must be added in chronological order. Data can never be set for dates 
prior or equal to the one of the most recent update. Because of that, first 
update must have a number of seconds higher than the one of the date of creation
of the database.


Important note on database updating technique.
------------------------------------------------------
RRD databases do not work like gnuplot. Pairs fed to the database must not be
exactly like gnuplot pairs or else the end result will be erronous. 

With gnuplot feeding the pairs(1,10) and (2,25) would resultin the value 10 
being drawn between 1 and 2  and 25 being drawn between 2 and 3. 

With rrd, the opposite will happen. If you feed the database with the pairs
(1,10) and (2,25)this will draw the value 10 between 0 and 1 and draw 25 
between 1 and 2.

Make sure you understand this prior to feeding the database or else your 
entire set of data will be corrupted. 


Note on data accuracy.
-----------------------------------------------------
When using the AVERAGE consolidation function(CF), data will be consolidated 
into a single point based on the average of all the points used.
 
While transferring data points into an average and then adding up that average
to make another data point in combined databases we have found that some data 
accuracy was lost.

In one example where all the data fed was verified as being exact, the rounding
of the first point combined with the rounding of the sum of all those rounded 
points transformed an expected sum of 7348 into 7344. 

4/7348 = 0.0005 wich means that approximatly .05% of data accuracy being lost.    



Generating Graphs
------------------------------------------------------
rrdtool.graph( imageName,'--imgformat', 'PNG','--width', '600','--height', 
'200','--start', "%i" %(start) ,'--end', "%s" %(end), '--vertical-label', '%s' 
%type,'--title', '%s'%title,'COMMENT: Minimum %s Maximum  %s Mean %.2f\c' 
%( minimum, maximum, mean), '--lower-limit','0',
'DEF:latency=%s:latency:AVERAGE'%databaseName,
'AREA:latency#cd5c5c:%s' %type,'LINE1:latency#8b0000:%s'%type)

- Will create an image named imageName of the specified width and height.
- Start and End must be expressed in seconds since epoch. Integer value only,
  no float will be accepted.
- Label, comments and title speak for themselves. 
- 'DEF:latency=%s:latency:AVERAGE'%databaseName means to get data from the 
   AVERAGE RRA coming from database named databaseName and to store it in a
   variable named latency. 
- Fetched data in preceding line will be comprised between start and end.
- 'AREA:latency#cd5c5c:%s' %type means to draw an area style graph with the
   data found in the variable named latency.
- 'LINE1:latency#8b0000:%s'%type means to draw a line1 style graph with the
   data found in the variable named latency.
- The above plots the same data twice. However having a line contour the area
  graph makes graphs looks much better.
- In both cases the #xxxxxx number helps specify the color of the graph.

                   
Database size :
------------------------------------------------------
Database size, since it will never gow, has been found very acceptable. 

Current testing configuration has us transfer all the pickled data from both 
rx and tx clients from machines called pxatx, pds5 and pds6. This means around
135 sources/clients. Tx clients have 5 databases each.Rx sources only have 3.
All dabatases are made to be fed with data that is split by the minute.

In each database, we currently keep the data archived in this fashion : 
1- The mean,max and min of every minute saved up to the last 5 days.
2- The mean,max and min of every hour minutes saved up to the last 14 days.
3- The mean,max and min of every day saved up to the last 10 years.

All this takes up around 180 megs on the disk.


Ressource pages :
------------------------------------------------------
http://oss.oetiker.ch/rrdtool/ ( official web page )
http://projects.adytum.us/tracs/PyRRD/
http://en.wikipedia.org/wiki/Rrdtool
man rrdcreate, man rrdupdate, man rrdgraph
