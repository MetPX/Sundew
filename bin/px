#! /usr/bin/python
# -*- coding: iso-8859-1 -*-
#! /usr/bin/env python2

"""
MetPX Copyright (C) 2004-2006  Environment Canada
MetPX comes with ABSOLUTELY NO WARRANTY; 
For details type see COPYING in the source directory tree.
"""

# manual annihilation:
#
# killall ptx
# killall prx
# rm -f /apps/px/[rt]x/.lock

import sys, os, os.path, time, pwd

# default library path

# old way
sys.path.insert(1, '/apps/px/lib')

# debian way
sys.path.insert(1, '/usr/lib/px')

# developpement library path option through PXLIB

try:
         sys.path.insert(1, os.path.normpath(os.environ['PXLIB']) )
except :
         pass

# developpement library path option through PXROOT
try:
    sys.path.insert(1, os.path.normpath(os.environ['PXROOT'] + '/lib'))
    sys.path.insert(1,sys.path[0] + '/../lib/importedLibs')
except :
    pass

#

import PXPaths
PXPaths.normalPaths()

def startThem(dir,name,cmd):
    """
    sleep A and sleep B sont la pour regler un probleme de synchronisation qui
    survient lors du startupDB a un moment ou le rep. de la journee
    n'est pas present. Il vont disparaitre lors de la reorg.
    """
    counter = 0
    for cfname in os.listdir( dir ):
        if cfname[-5:] != '.conf':
            continue

        id = cfname[:-5]
        counter += 1
        if os.fork() == 0:
             if counter == 2:
                 time.sleep(0.6)  # sleep A
             os.execl( sys.path[0] + '/' + name , name, id, cmd )

def start(cmd):
    startThem(PXPaths.ETC + 'rx/', 'pxReceiver', cmd)
    time.sleep(0.6) # sleep B
    startThem(PXPaths.ETC + 'fx/', 'pxFilter', cmd)
    time.sleep(0.6) # sleep B
    startThem(PXPaths.ETC + 'tx/', 'pxSender', cmd)
    time.sleep(0.1)   # sleep C
    startThem(PXPaths.ETC + 'trx/', 'pxTransceiver', cmd)
    time.sleep(2)   # sleep C

# Only if run as root, we will try to change the user
# id to pds user. It's because at reboot time init try
# to start px as root
if os.getuid() == 0:
    try:
        pdsUID = pwd.getpwnam("px")[2]
        os.setuid(pdsUID)
    except:
       try:
           pdsUID = pwd.getpwnam("pds")[2]
           os.setuid(pdsUID)
       except:
           print "No pds user on this machine. Don't start as root!"
           sys.exit(2)

# Two arguments must be supplied (source and command)
if len(sys.argv) == 2:
    if sys.argv[1] not in ['start', 'stop', 'status', 'restart', 'reload']:
        print "USAGE: px (start|stop|restart|reload|status) "
        print "Wrong command name"
        sys.exit(1)
elif len(sys.argv) == 1:
    print "USAGE: px (start|stop|restart|reload|status) "
    print "Command missing"
    sys.exit(1)
elif len(sys.argv) > 2:
    print "USAGE: px (start|stop|restart|reload|status) "
    print "Too many arguments"
    sys.exit(1)

start(sys.argv[1])
sys.exit(0)
