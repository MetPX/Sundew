#!/usr/bin/env python
"""
MetPX Copyright (C) 2004-2006  Environment Canada
MetPX comes with ABSOLUTELY NO WARRANTY; 
For details type see COPYING in the source directory tree.

#############################################################################################
# Name: pxChecker
#
# Author: Daniel Lemay
#
# Date: 2005-07-11
#
# Description: Check if there is some processes that are supposed to run and are not
#              running. If it is the case, pxChecker will restart (stop + start)  
#              the processes that are supposed to run
# 
#   Usage:   This program should be called from a crontab. The entry should look like:
#  
#             * * * * * if test -x /apps/px/bin/pxChecker; then /apps/px/bin/pxChecker > /dev/null 2>&1;fi
#
#############################################################################################
"""

import os, time, pwd, sys, time, getopt

# default library path

# old way
sys.path.insert(1, '/apps/px/lib/importedLibs')
sys.path.insert(1, '/apps/px/lib')

# debian way
sys.path.insert(1, '/usr/lib/px/importedLibs')
sys.path.insert(1, '/usr/lib/px')

# developpement library path option through PXLIB

try:
    pxlib = os.path.normpath(os.environ['PXLIB'])
    sys.path.insert(1, pxlib + '/importedLibs')
    sys.path.insert(1, pxlib )
except :
         pass

# developpement library path option through PXROOT
try:
    pxroot = os.path.normpath(os.environ['PXROOT'])
    sys.path.insert(1, pxroot + '/lib/importedLibs')
    sys.path.insert(1, pxroot + '/lib')
except :
    pass

#

import PXPaths
from Logger import Logger
from PXManager import PXManager

class PXChecker:

    LOG_LEVEL = "INFO"      # Logging level

    # We want this program to run under pds user
    #if not os.getuid() ==  pwd.getpwnam('pds')[2]:
    #    pdsUID = pwd.getpwnam("pds")[2]
    #    os.setuid(pdsUID)

    def __init__(self):

        PXPaths.normalPaths()
        self.manager = PXManager()
        LOG_NAME = self.manager.LOG + 'pxChecker.log'    # Log's name
        logger = Logger(LOG_NAME, PXChecker.LOG_LEVEL, "Checker")

        self.logger = logger.getLogger()
        self.manager.setLogger(self.logger)

    def check(self):
        DEBUG = 0 
        self.manager.initNames()
        self.manager.initShouldRunNames()
        self.manager.initRunningNames()

        if DEBUG:
            print "*************** All names (.conf) **************"
            print self.manager.getFxNames()
            print self.manager.getRxNames()
            print self.manager.getTxNames()
            print self.manager.getTRxNames()
            print "*************** Should run names (.conf + .lock) **************"
            print self.manager.getShouldRunFxNames()
            print self.manager.getShouldRunRxNames()
            print self.manager.getShouldRunTxNames()
            print self.manager.getShouldRunTRxNames()
            print "************** Running names (.conf + .lock + ps -p pid) *************"
            print self.manager.getRunningFxNames()
            print self.manager.getRunningRxNames()
            print self.manager.getRunningTxNames()
            print self.manager.getRunningTRxNames()
            print "************** Should  run but not running names *************"
            print self.manager.getNotRunningFxNames()
            print self.manager.getNotRunningRxNames()
            print self.manager.getNotRunningTxNames()
            print self.manager.getNotRunningTRxNames()

        # Restart receivers
        for name in self.manager.getNotRunningRxNames():
            self.logger.info("Receiver %s has been restarted by pxChecker" % name)
            if os.fork() == 0:
                os.execl(PXPaths.BIN + "pxReceiver" , "pxReceiver", name, "restart")

        # Restart filters
        for name in self.manager.getNotRunningFxNames():
            self.logger.info("Filter %s has been restarted by pxChecker" % name)
            if os.fork() == 0:
                os.execl(PXPaths.BIN + "pxFilter" , "pxFilter", name, "restart")

        # Restart senders
        for name in self.manager.getNotRunningTxNames():
            self.logger.info("Sender %s has been restarted by pxChecker" % name)
            if os.fork() == 0:
                os.execl(PXPaths.BIN + "pxSender" , "pxSender", name, "restart")

        # Restart transceivers
        for name in self.manager.getNotRunningTRxNames():
            self.logger.info("Transceiver %s has been restarted by pxChecker" % name)
            if os.fork() == 0:
                os.execl(PXPaths.BIN + "pxTransceiver" , "pxTransceiver", name, "restart")

        time.sleep(1)

if __name__ == '__main__':

    checker =  PXChecker()
    checker.check()
