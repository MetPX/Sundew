#! /usr/bin/env python

"""
MetPX Copyright (C) 2004-2006  Environment Canada
MetPX comes with ABSOLUTELY NO WARRANTY; For details type see the file
named COPYING in the root of the source directory tree.

#############################################################################################
# Name: pxSender
#
# Authors: Louis-Philippe Theriault
#          Peter Silva 
#          Daniel Lemay
#
# Date: October 2004
#
# Description:
#
#############################################################################################
"""
import sys, os, pwd, time

# default library path

sys.path.insert(1, '/usr/lib/px')

# developpement library path option through PXLIB

try:
         sys.path.insert(1, os.path.normpath(os.environ['PXLIB']) )
except :
         pass


import PXPaths
from optparse import OptionParser
from PXManager import PXManager
from Logger import Logger
from DiskReader import DiskReader
from CacheManager import CacheManager
from Client import Client
from Source import Source
from PXIgniter import PXIgniter

# Initialize PX Paths
PXPaths.normalPaths()

if __name__ == '__main__':
    # We want this program to run under pds user
    #if not os.getuid() ==  pwd.getpwnam('pds')[2]:
    #    pdsUID = pwd.getpwnam("pds")[2]
    #    os.setuid(pdsUID)

    # Verify user is not root
    #if os.getuid() == 0:
    #    print "FATAL: Do not start as root. It will be a mess!"
    #    sys.exit(2)

    # Only if run as root, we will try to change the user
    # id to pds user. It's because at reboot time init try
    # to start px as root
    if os.getuid() == 0:
        try:
            pdsUID = pwd.getpwnam("pds")[2]
            os.setuid(pdsUID)
        except:
            print "No pds user on this machine. Don't start as root!"
            sys.exit(2)
    
    usage =  """%prog [client] (start|stop|restart|reload|status)\n
example 1: %prog cmc start   => will start cmc client
example 2: %prog start       => will start all clients
             """

    parser = OptionParser(usage)

    # We can set the logLevel to ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL']
    parser.add_option("-l", "--logLevel",
                      action="store", type="string", dest="logLevel", default="INFO",
                      metavar="LOGLEVEL", help="Set the logging level [default: %default]")

    options, args = parser.parse_args()

    manager = PXManager()
    manager.initPXPaths()
    manager.initNames()
    clientNames = manager.getTxNames()
    #print clientNames

    # The command will be applied to a particular client 
    if len(args) == 2:
        if args[1] in ['start', 'stop', 'status', 'restart', 'reload']:
            command = args[1]
        else:
            parser.error("Wrong command name")

        if args[0] in clientNames:
            clientName = args[0]
        else:
            parser.error("Wrong client name")

    elif len(args) == 1:
            parser.error("Client or command missing")
    elif len(args) == 0:
        parser.error("Client and command missing")
    elif len(args) > 2:
        parser.error("Too many arguments")

    logName = PXPaths.LOG + "tx_%s.log" % clientName
    lockPath = PXPaths.TXQ + clientName 

    logger = Logger(logName, options.logLevel, 'TX' + clientName)
    logger = logger.getLogger()

    igniter = PXIgniter('sender', clientName, command, lockPath, logger)

    client = Client(clientName, logger)
    igniter.setFlow(client)
    
    # Selection by protocol type
    if client.type == 'am':
        import senderAm
        gateway = senderAm.senderAm('/dev/null', client, logger)
        gateway.setIgniter(igniter)
        igniter.setGateway(gateway)
    elif client.type == 'wmo':
        import senderWmo
        gateway = senderWmo.senderWmo('/dev/null', client, logger)
        gateway.setIgniter(igniter)
        igniter.setGateway(gateway)
    elif client.type == 'amis':
        import senderAMIS
        gateway = senderAMIS.senderAMIS(client, logger)
        gateway.setIgniter(igniter)
        igniter.setGateway(gateway)
    elif client.type == 'script':
        from MultiKeysStringSorter import MultiKeysStringSorter
        import SenderScript
        igniter.setGateway("DUMMY")
        reader = DiskReader(PXPaths.TXQ + client.name, client.batch, client.validation, False,
                            client.mtime, True, logger, eval(client.sorter), client)

        cacheManager  = None

        if client.nodups : cacheManager = CacheManager(maxEntries=25000, timeout=2*3600)

        sender_script = SenderScript.SenderScript(client, logger, cacheManager)

        while True:
            if igniter.reloadMode:
                client.__init__(client.name, client.logger)
                reader = DiskReader(PXPaths.TXQ + client.name, client.batch, client.validation, False,
                                    client.mtime, True, logger, eval(client.sorter), client)
                logger.info("Sender FTP has been reloaded")
                igniter.reloadMode = False
                sender_script = SenderScript.SenderScript(client, logger, cacheManager)

            reader.read()
            if len(reader.sortedFiles) >= 1:
                sortedFiles = reader.sortedFiles[:client.batch]
                logger.info("%d files will be sent" % len(sortedFiles))
                sender_script.send(sortedFiles)
            else:
                time.sleep(1)
    elif client.type == 'single-file':
        from MultiKeysStringSorter import MultiKeysStringSorter
        import SenderFTP
        igniter.setGateway("DUMMY")
        reader = DiskReader(PXPaths.TXQ + client.name, client.batch, client.validation, False,
                            client.mtime, True, logger, eval(client.sorter), client)

        cacheManager = None

        if client.nodups : cacheManager = CacheManager(maxEntries=25000, timeout=2*3600)

        while True:
            if igniter.reloadMode:
                client.__init__(client.name, client.logger)
                reader = DiskReader(PXPaths.TXQ + client.name, client.batch, client.validation, False,
                                    client.mtime, True, logger, eval(client.sorter), client)
                logger.info("Sender FTP has been reloaded")
                igniter.reloadMode = False

            reader.read()
            if len(reader.sortedFiles) >= 1:
                sortedFiles = reader.sortedFiles[:client.batch]
                logger.info("%d files will be sent" % len(sortedFiles))
                # send data
                sender = SenderFTP.SenderFTP(client, logger, cacheManager)
                sender.send(sortedFiles)
                sender.close()
            else:
                time.sleep(1)

    else:
        raise Exception('Unknown type') 

    gateway.run()
